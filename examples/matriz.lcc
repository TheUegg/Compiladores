def multiplyMatrix (int row1, int col1, int A, int row2, int col2, int B) {
  int i;
  int j;
  int k;

  if (row2 != col1) {
    print "Multiplicação não é possível!";
  } else {
    print "Matriz 1:";
    print A;
    print "Matriz 2:";
    print B;

    int C;
    C = new int[row1][col2];

    for (i = 0; i < row1; i = i + 1) {
      for (j = 0; j < col2; j = j + 1) {
        for (k = 0; k < row2; k = k + 1) {
          C[i][j] = C[i][j] + A[i][k] * B[k][j];
        }
      }
    }

    print "Resultado:";
    print C;
  } endif;
}

def addMatrix (int row1, int col1, int A, int row2, int col2, int B) {
  int i;
  int j;

  if (row1 != row2) {
    print "Adição não é possível!";
  } else if (col1 != col2) {
    print "Adição não é possível!";
  } else {
    print "Matriz 1:";
    print A;
    print "Matriz 2:";
    print B;

    int C;
    C = new int[row1][col2];

    for (i = 0; i < row1; i = i + 1) {
      for (j = 0; j < col1; j = j + 1) {
        C[i][j] = A[i][j] + B[i][j];
      }
    }

    print "Resultado:";
    print C;
  } endif; endif;
}

def subtractMatrix (int row1, int col1, int A, int row2, int col2, int B) {
  int i;
  int j;

  if (row1 != row2) {
    print "Subtração não é possível!";
  } else if (col1 != col2) {
    print "Subtração não é possível!";
  } else {
    print "Matriz 1:";
    print A;
    print "Matriz 2:";
    print B;
    
    int C;
    C = new int[row1][col2];

    for (i = 0; i < row1; i = i + 1) {
      for (j = 0; j < col1; j = j + 1) {
        C[i][j] = A[i][j] - B[i][j];
      }
    }

    print "Resultado:";
    print C;
    return;
  } endif; endif;
}

def main () {
  int row1;
  row1 = 2;

  int col1;
  col1 = 2;

  int row2;
  row2 = 2;

  int col2;
  col2 = 2;
  
  int A;
  A = new int[2][2];
  A[0][0] = 5;
  A[0][1] = 5;
  A[1][0] = 2;
  A[1][1] = 2;
  
  int B;
  B = new int[2][2];
  B[0][0] = 6;
  B[0][1] = 6;
  B[1][0] = 1;
  B[1][1] = 1;

  invoke multiplyMatrix (row1, col1, A, row2, col2, B);
  invoke addMatrix (row1, col1, A, row2, col2, B);
  invoke subtractMatrix (row1, col1, A, row2, col2, B);
}